@page "/failed-downloads"
@using Microsoft.AspNetCore.SignalR.Client
@using TheArchiver.Data.Models
@inject QueueMonitorService MonitorService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Failed Downloads - TheArchiver Monitor</PageTitle>

<!-- Main Content -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Page Header -->
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <div class="flex items-center">
                <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center">
                    <span class="mr-3 text-4xl">‚ö†Ô∏è</span>
                    Failed Downloads
                </h1>
            </div>
            <div class="flex items-center space-x-4">
                <span class="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-300">
                    <span class="mr-1">‚ùå</span>
                    @failedItems.Count Failed
                </span>
                <button class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200 disabled:opacity-50" 
                       @onclick="RefreshFailed" disabled="@isLoading">
                    <span class="mr-2">üîÑ</span>
                    Refresh
                </button>
            </div>
        </div>
        <p class="mt-2 text-gray-600 dark:text-gray-400">Manage and retry failed download attempts</p>
    </div>

    @if (isLoading)
    {
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-12">
            <div class="flex items-center justify-center">
                <div class="flex flex-col items-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                    <p class="mt-4 text-gray-600 dark:text-gray-400">Loading failed downloads...</p>
                </div>
            </div>
        </div>
    }
    else if (failedItems.Count == 0)
    {
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-12">
            <div class="text-center">
                <div class="text-6xl mb-4">üéâ</div>
                <h3 class="text-lg font-medium text-green-600 dark:text-green-400 mb-2">No Failed Downloads!</h3>
                <p class="text-gray-500 dark:text-gray-400 mb-6">All downloads are processing successfully.</p>
                <a href="/" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                    <span class="mr-2">üìä</span>
                    Back to Dashboard
                </a>
            </div>
        </div>
    }
    else
    {
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700">
                <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 flex items-center">
                    <span class="mr-2">üìã</span>
                    Failed Download Details
                </h3>
            </div>
            
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead class="bg-gray-50 dark:bg-gray-700">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                ID
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                URL
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                                Error Message
                            </th>
                            <th scope="col" class="relative px-6 py-3">
                                <span class="sr-only">Actions</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        @foreach (var item in failedItems)
                        {
                            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200">
                                        #@item.Id
                                    </span>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-8 w-8 mr-3">
                                            <div class="h-8 w-8 bg-red-100 dark:bg-red-900/30 rounded-lg flex items-center justify-center">
                                                <span class="text-sm">üîó</span>
                                            </div>
                                        </div>
                                        <div class="max-w-xs lg:max-w-md xl:max-w-lg">
                                            <p class="text-sm text-gray-900 dark:text-gray-100 break-all" title="@item.Url">@item.Url</p>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-6 py-4">
                                    <div class="flex items-center">
                                        <span class="mr-2 text-red-500">üí¨</span>
                                        <span class="text-sm text-red-600 dark:text-red-400 font-medium">@item.ErrorMessage</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex space-x-2">
                                        <button class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
                                                @onclick="() => RetryDownload(item.Id)" 
                                                disabled="@isProcessing"
                                                title="Retry this download">
                                            <span class="mr-1">üîÑ</span>
                                            Retry
                                        </button>
                                        <button class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200"
                                                @onclick="() => RemoveItem(item.Id)" 
                                                disabled="@isProcessing"
                                                title="Remove this failed item">
                                            <span class="mr-1">üóëÔ∏è</span>
                                            Remove
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    
    <!-- Back Button -->
    <div class="mt-6">
        <a href="/" class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
            <span class="mr-2">‚Üê</span>
            Back to Dashboard
        </a>
    </div>
</div>

@code {
    private List<FailedDownloads> failedItems = new();
    private bool isLoading = true;
    private bool isProcessing = false;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await LoadFailedItems();
        await SetupSignalRConnection();
    }

    private async Task LoadFailedItems()
    {
        isLoading = true;
        failedItems = await MonitorService.GetFailedDownloadsAsync();
        isLoading = false;
    }

    private async Task SetupSignalRConnection()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/monitorhub"))
            .Build();

        hubConnection.On<string, string>("DownloadFailed", async (url, error) =>
        {
            await LoadFailedItems();
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task RefreshFailed()
    {
        await LoadFailedItems();
    }

    private async Task RetryDownload(int id)
    {
        isProcessing = true;
        var result = await MonitorService.RetryFailedDownloadAsync(id);
        if (result)
        {
            await LoadFailedItems();
        }
        isProcessing = false;
    }

    private async Task RemoveItem(int id)
    {
        isProcessing = true;
        var result = await MonitorService.RemoveFailedDownloadAsync(id);
        if (result)
        {
            await LoadFailedItems();
        }
        isProcessing = false;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
