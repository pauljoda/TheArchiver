@page "/console-output"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Console Output - TheArchiver Monitor</PageTitle>

<HeadContent>
    <script src="~/js/console-output.js"></script>
</HeadContent>

<!-- Page Header -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
    <div class="flex items-center justify-between mb-6">
        <div class="flex items-center">
            <h1 class="text-3xl font-bold text-gray-900 flex items-center">
                <span class="mr-3 text-4xl">üñ•Ô∏è</span>
                Console Output
            </h1>
            <span class="ml-4 inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-green-100 text-green-800">
                <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse mr-2"></div>
                Live Stream
            </span>
        </div>
        <div class="flex items-center space-x-3">
            <button @onclick="ClearLogs" 
                    class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                <span class="mr-2">üóëÔ∏è</span>
                Clear
            </button>
            <button @onclick="ToggleAutoScroll" 
                    class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                <span class="mr-2">üìå</span>
                @(autoScroll ? "Disable" : "Enable") Auto-scroll
            </button>
            <button @onclick="TogglePause" 
                    class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                <span class="mr-2">@(isPaused ? "‚ñ∂Ô∏è" : "‚è∏Ô∏è")</span>
                @(isPaused ? "Resume" : "Pause")
            </button>
            <button @onclick="RefreshConnection" 
                    class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                <span class="mr-2">üîÑ</span>
                Reconnect
            </button>
            <button @onclick="ShowKeyboardShortcuts" 
                    class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200">
                <span class="mr-2">‚å®Ô∏è</span>
                Shortcuts
            </button>
        </div>
    </div>
</div>

    <!-- Connection Status and Statistics -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-4">
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
            <!-- Connection Status -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        @if (isConnected)
                        {
                            <div class="w-3 h-3 rounded-full bg-green-400 animate-pulse"></div>
                        }
                        else if (hubConnection?.State == HubConnectionState.Connecting)
                        {
                            <div class="w-3 h-3 rounded-full bg-yellow-400 animate-spin"></div>
                        }
                        else
                        {
                            <div class="w-3 h-3 rounded-full bg-red-400"></div>
                        }
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-900 dark:text-gray-100">
                            Connection Status
                        </p>
                        <p class="text-sm text-gray-500 dark:text-gray-400">
                            @(isConnected ? "Connected" : hubConnection?.State == HubConnectionState.Connecting ? "Connecting..." : "Disconnected")
                        </p>
                    </div>
                </div>
            </div>

            <!-- Log Statistics -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
                <div class="text-center">
                    <p class="text-2xl font-bold text-blue-600 dark:text-blue-400">@consoleLines.Count</p>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Total Log Lines</p>
                    @if (isConnected && !isPaused)
                    {
                        <div class="mt-2">
                            <div class="w-2 h-2 rounded-full bg-green-400 animate-pulse mx-auto"></div>
                            <span class="text-xs text-green-600 dark:text-green-400">Live</span>
                        </div>
                    }
                </div>
            </div>

            <!-- Last Update -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
                <div class="text-center">
                    <p class="text-sm font-medium text-gray-900 dark:text-gray-100">
                        @(isConnected ? $"Last Update" : "No Connection")
                    </p>
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                        @(isConnected ? $"{lastUpdateTime:HH:mm:ss}" : "N/A")
                    </p>
                    @if (isConnected)
                    {
                        <div class="mt-2">
                            <span class="text-xs text-gray-400">@GetFilteredLines().Count() visible</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Console Output -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mt-4 mb-8">
        <div class="bg-gray-900 rounded-lg shadow-lg overflow-hidden">
            <div class="bg-gray-800 px-4 py-2 border-b border-gray-700">
                <div class="flex items-center justify-between">
                    <h3 class="text-sm font-medium text-gray-300">DownloadWorker Console Output</h3>
                    <div class="flex items-center space-x-2">
                        <span class="text-xs text-gray-400">@consoleLines.Count lines</span>
                        @if (isPaused)
                        {
                            <span class="text-xs text-yellow-400 font-medium">‚è∏Ô∏è PAUSED</span>
                        }
                        else
                        {
                            <div class="w-2 h-2 rounded-full bg-green-400 animate-pulse"></div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="console-output-container h-96 overflow-y-auto p-4 font-mono text-sm" id="console-output-container" @ref="consoleContainer">
                                    @if (consoleLines.Count == 0)
                    {
                        <div class="text-gray-500 text-center py-8">
                            <div class="text-4xl mb-2">üì∫</div>
                            <p>Waiting for console output...</p>
                            <p class="text-sm text-gray-600 mt-1">Console logs will appear here in real-time</p>
                        </div>
                    }
                    else if (isPaused)
                    {
                        <div class="text-yellow-500 text-center py-4 border-t border-gray-700">
                            <div class="text-lg mb-2">‚è∏Ô∏è Console Paused</div>
                            <p class="text-sm">New logs are not being displayed. Click Resume or press Space to continue.</p>
                        </div>
                    }
                else
                {
                    @foreach (var line in GetVisibleLines())
                    {
                        <div class="console-line @GetLogLevelClass(line.Level) mb-1 hover:bg-gray-800 transition-colors duration-150 p-2 rounded">
                            <div class="flex items-start space-x-2">
                                <span class="text-gray-500 text-xs font-mono flex-shrink-0 w-24">
                                    @line.Timestamp.ToString("HH:mm:ss.fff")
                                </span>
                                <span class="log-level-badge @GetLogLevelBadgeClass(line.Level) text-xs px-2 py-1 rounded-full font-medium">
                                    @line.Level
                                </span>
                                <span class="text-xs text-gray-400 font-mono flex-shrink-0 w-20">
                                    [@line.Source]
                                </span>
                                <span class="ml-2 flex-1 break-words">@((MarkupString)HighlightSearchTerm(line.Message))</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>

    <!-- Download Status -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-6">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
            <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Download Status</h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="text-center">
                    <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">@GetDownloadCount()</div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">Downloads Today</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-green-600 dark:text-green-400">@GetSuccessCount()</div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">Successful</div>
                </div>
                <div class="text-center">
                    <div class="text-2xl font-bold text-red-600 dark:text-red-400">@GetErrorCount()</div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">Failed</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Controls and Statistics -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-8">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Filter Controls -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Filter & Search</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Log Level</label>
                        <select @bind="selectedLogLevel" class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                            <option value="">All Levels</option>
                            <option value="Debug">Debug</option>
                            <option value="Information">Information</option>
                            <option value="Warning">Warning</option>
                            <option value="Error">Error</option>
                            <option value="Critical">Critical</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Search</label>
                        <input type="text" @bind="searchTerm" placeholder="Search in logs..." 
                               class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                    </div>
                </div>
                <div class="mt-4">
                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Max Lines</label>
                    <input type="number" @bind="maxLines" min="100" max="10000" step="100"
                           class="block w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
                </div>
            </div>

            <!-- Log Level Distribution -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Log Level Distribution</h3>
                <div class="space-y-3">
                    @foreach (var level in GetLogLevelDistribution())
                    {
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-2">
                                <span class="w-3 h-3 rounded-full @GetLogLevelColor(level.Key)"></span>
                                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">@level.Key</span>
                            </div>
                            <div class="flex items-center space-x-2">
                                <div class="w-24 bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                                    <div class="@GetLogLevelColor(level.Key) h-2 rounded-full" style="width: @(GetLogLevelPercentage(level.Value))%"></div>
                                </div>
                                <span class="text-sm text-gray-500 dark:text-gray-400 w-12 text-right">@level.Value</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Keyboard Shortcuts Modal -->
    @if (showShortcutsModal)
    {
        <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" @onclick="CloseShortcutsModal">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white" @onclick:stopPropagation="true">
                <div class="mt-3">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Keyboard Shortcuts</h3>
                    <div class="space-y-3">
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-gray-700">Space</span>
                            <span class="text-sm text-gray-500">Toggle Pause/Resume</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-gray-700">Ctrl/Cmd + L</span>
                            <span class="text-sm text-gray-500">Clear Logs</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="text-sm text-gray-700">Ctrl/Cmd + F</span>
                            <span class="text-sm text-gray-500">Focus Search</span>
                        </div>
                    </div>
                    <div class="mt-6">
                        <button @onclick="CloseShortcutsModal" 
                                class="w-full inline-flex justify-center px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Toast Notifications -->
    @if (notifications.Any())
    {
        <div class="fixed bottom-4 right-4 z-50 space-y-2">
            @foreach (var notification in notifications)
            {
                <div class="bg-white rounded-lg shadow-lg border border-gray-200 p-4 max-w-sm transform transition-all duration-300 @(notification.IsVisible ? "translate-x-0 opacity-100" : "translate-x-full opacity-0")">
                    <div class="flex items-start">
                        <div class="flex-shrink-0">
                            <span class="text-2xl">@GetNotificationIcon(notification.Type)</span>
                        </div>
                        <div class="ml-3 flex-1">
                            <p class="text-sm font-medium text-gray-900">@notification.Title</p>
                            <p class="text-sm text-gray-500">@notification.Message</p>
                        </div>
                        <button @onclick="() => RemoveNotification(notification.Id)" class="ml-2 text-gray-400 hover:text-gray-600">
                            <span class="text-lg">√ó</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    }

@code {
    private List<ConsoleLogLine> consoleLines = new();
    private HubConnection? hubConnection;
    private bool isConnected = false;
    private bool autoScroll = true;
    private bool isPaused = false;
    private bool showShortcutsModal = false;
    private DateTime lastUpdateTime = DateTime.Now;
    private ElementReference consoleContainer;
    private List<Notification> notifications = new();
    private DotNetObjectReference<ConsoleOutput>? dotNetRef;
    
    // Filter properties
    private string selectedLogLevel = "";
    private string searchTerm = "";
    private int maxLines = 1000;

    public class ConsoleLogLine
    {
        public DateTime Timestamp { get; set; }
        public string Level { get; set; } = "";
        public string Message { get; set; } = "";
        public string Source { get; set; } = "";
    }

    public class Notification
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public NotificationType Type { get; set; }
        public bool IsVisible { get; set; } = true;
        public DateTime CreatedAt { get; set; } = DateTime.Now;
    }

    public enum NotificationType
    {
        Info,
        Success,
        Warning,
        Error
    }

    protected override async Task OnInitializedAsync()
    {
        await SetupSignalRConnection();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Set up JavaScript interop
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupBlazorInterop", dotNetRef);
        }
    }

    [JSInvokable]
    public void TogglePauseFromJS()
    {
        InvokeAsync(() =>
        {
            TogglePause();
            StateHasChanged();
        });
    }

    [JSInvokable]
    public void ClearLogsFromJS()
    {
        InvokeAsync(() =>
        {
            ClearLogs();
            StateHasChanged();
        });
    }

    private async Task SetupSignalRConnection()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/consolehub"))
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string, string, string>("ConsoleOutput", async (level, source, message) =>
            {
                if (isPaused) return;
                
                var logLine = new ConsoleLogLine
                {
                    Timestamp = DateTime.Now,
                    Level = level,
                    Source = source,
                    Message = message
                };

                await InvokeAsync(() =>
                {
                    consoleLines.Add(logLine);
                    
                    // Keep only the last maxLines
                    if (consoleLines.Count > maxLines)
                    {
                        consoleLines.RemoveRange(0, consoleLines.Count - maxLines);
                    }
                    
                    lastUpdateTime = DateTime.Now;
                    
                    // Show notifications for important events
                    if (level.Equals("Error", StringComparison.OrdinalIgnoreCase) || 
                        level.Equals("Critical", StringComparison.OrdinalIgnoreCase))
                    {
                        AddNotification("Error Detected", message, NotificationType.Error);
                    }
                    else if (message.Contains("Download completed successfully", StringComparison.OrdinalIgnoreCase))
                    {
                        AddNotification("Download Success", message, NotificationType.Success);
                    }
                    
                    StateHasChanged();
                });

                if (autoScroll)
                {
                    await InvokeAsync(async () =>
                    {
                        try
                        {
                            await JSRuntime.InvokeVoidAsync("scrollToBottom", "console-output-container");
                        }
                        catch
                        {
                            // Ignore JS errors
                        }
                    });
                }
            });

            hubConnection.Reconnecting += exception =>
            {
                isConnected = false;
                AddNotification("Connection Lost", "Attempting to reconnect...", NotificationType.Warning);
                StateHasChanged();
                return Task.CompletedTask;
            };

            hubConnection.Reconnected += connectionId =>
            {
                isConnected = true;
                AddNotification("Reconnected", "Connection restored successfully", NotificationType.Success);
                StateHasChanged();
                return Task.CompletedTask;
            };

            hubConnection.Closed += exception =>
            {
                isConnected = false;
                StateHasChanged();
                
                // Auto-reconnect after a delay
                _ = Task.Delay(5000).ContinueWith(async _ =>
                {
                    try
                    {
                        if (hubConnection.State == HubConnectionState.Disconnected)
                        {
                            await hubConnection.StartAsync();
                        }
                    }
                    catch
                    {
                        // Ignore reconnection errors
                    }
                });
                
                return Task.CompletedTask;
            };

            await hubConnection.StartAsync();
            isConnected = true;
            AddNotification("Connected", "Console output stream connected successfully", NotificationType.Success);
        }
        catch (Exception ex)
        {
            consoleLines.Add(new ConsoleLogLine
            {
                Timestamp = DateTime.Now,
                Level = "Error",
                Message = $"Failed to connect to console hub: {ex.Message}",
                Source = "ConsoleOutput"
            });
        }
    }

    private void ClearLogs()
    {
        consoleLines.Clear();
        StateHasChanged();
    }

    private void ToggleAutoScroll()
    {
        autoScroll = !autoScroll;
    }

    private void TogglePause()
    {
        isPaused = !isPaused;
        
        // Add a notification log line
        var notificationLine = new ConsoleLogLine
        {
            Timestamp = DateTime.Now,
            Level = "Information",
            Source = "Monitor",
            Message = isPaused ? "Console output paused" : "Console output resumed"
        };
        
        consoleLines.Add(notificationLine);
        StateHasChanged();
    }

    private void ShowKeyboardShortcuts()
    {
        showShortcutsModal = true;
    }

    private void CloseShortcutsModal()
    {
        showShortcutsModal = false;
    }

    private void AddNotification(string title, string message, NotificationType type = NotificationType.Info)
    {
        var notification = new Notification
        {
            Title = title,
            Message = message,
            Type = type
        };
        
        notifications.Add(notification);
        
        // Auto-remove after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                RemoveNotification(notification.Id);
                StateHasChanged();
            });
        });
        
        StateHasChanged();
    }

    private void RemoveNotification(Guid id)
    {
        var notification = notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null)
        {
            notification.IsVisible = false;
            notifications.Remove(notification);
            StateHasChanged();
        }
    }

    private string GetNotificationIcon(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "‚úÖ",
            NotificationType.Warning => "‚ö†Ô∏è",
            NotificationType.Error => "‚ùå",
            _ => "‚ÑπÔ∏è"
        };
    }

    private async Task RefreshConnection()
    {
        if (hubConnection != null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
        
        consoleLines.Clear();
        await SetupSignalRConnection();
    }

    private string GetLogLevelClass(string level)
    {
        return level.ToLower() switch
        {
            "error" or "critical" => "text-red-400",
            "warning" => "text-yellow-400",
            "information" => "text-blue-400",
            "debug" => "text-gray-400",
            _ => "text-gray-300"
        };
    }

    private string GetLogLevelBadgeClass(string level)
    {
        return level.ToLower() switch
        {
            "error" or "critical" => "bg-red-600 text-white",
            "warning" => "bg-yellow-600 text-white",
            "information" => "bg-blue-600 text-white",
            "debug" => "bg-gray-600 text-white",
            _ => "bg-gray-600 text-white"
        };
    }

    private string GetLogLevelColor(string level)
    {
        return level.ToLower() switch
        {
            "error" or "critical" => "bg-red-500",
            "warning" => "bg-yellow-500",
            "information" => "bg-blue-500",
            "debug" => "bg-gray-500",
            _ => "bg-gray-500"
        };
    }

    private IEnumerable<ConsoleLogLine> GetFilteredLines()
    {
        var filtered = consoleLines.AsEnumerable();

        // Filter by log level
        if (!string.IsNullOrEmpty(selectedLogLevel))
        {
            filtered = filtered.Where(line => line.Level.Equals(selectedLogLevel, StringComparison.OrdinalIgnoreCase));
        }

        // Filter by search term
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(line => 
                line.Message.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                line.Source.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        return filtered;
    }

    private IEnumerable<ConsoleLogLine> GetVisibleLines()
    {
        var filtered = GetFilteredLines();
        
        // For performance, only show the last 1000 lines when there are many logs
        if (filtered.Count() > 1000)
        {
            return filtered.TakeLast(1000);
        }
        
        return filtered;
    }

    private Dictionary<string, int> GetLogLevelDistribution()
    {
        var levels = new[] { "Debug", "Information", "Warning", "Error", "Critical" };
        var distribution = new Dictionary<string, int>();
        
        foreach (var level in levels)
        {
            distribution[level] = consoleLines.Count(line => line.Level.Equals(level, StringComparison.OrdinalIgnoreCase));
        }
        
        return distribution;
    }

    private double GetLogLevelPercentage(int count)
    {
        if (consoleLines.Count == 0) return 0;
        return Math.Round((double)count / consoleLines.Count * 100, 1);
    }

    private string HighlightSearchTerm(string text)
    {
        if (string.IsNullOrEmpty(searchTerm) || string.IsNullOrEmpty(text))
            return text;

        var highlighted = text.Replace(searchTerm, $"<mark class=\"bg-yellow-200 text-yellow-900 px-1 rounded\">{searchTerm}</mark>", StringComparison.OrdinalIgnoreCase);
        return highlighted;
    }

    private int GetDownloadCount()
    {
        var today = DateTime.Today;
        return consoleLines.Count(line => 
            line.Timestamp.Date == today && 
            line.Message.Contains("Starting download:", StringComparison.OrdinalIgnoreCase));
    }

    private int GetSuccessCount()
    {
        var today = DateTime.Today;
        return consoleLines.Count(line => 
            line.Timestamp.Date == today && 
            line.Message.Contains("Download completed successfully", StringComparison.OrdinalIgnoreCase));
    }

    private int GetErrorCount()
    {
        var today = DateTime.Today;
        return consoleLines.Count(line => 
            line.Timestamp.Date == today && 
            (line.Message.Contains("Download failed", StringComparison.OrdinalIgnoreCase) ||
             line.Message.Contains("Exception during download", StringComparison.OrdinalIgnoreCase)));
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        
        // Clean up JavaScript interop
        try
        {
            await JSRuntime.InvokeVoidAsync("cleanupBlazorInterop");
        }
        catch
        {
            // Ignore cleanup errors
        }
        
        dotNetRef?.Dispose();
    }
}
